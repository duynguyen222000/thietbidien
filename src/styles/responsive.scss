$xs: 360px;
$sm: 480px;
$xsm: 640px;
$md: 768px;
$lg: 1024px;
$xl: 1280px;
$xxl: 1300px;
$xxxl: 1600px;
$xxxxl: 1920px;

$breakpoints: (
  xs: "360px",
  sm: "480px",
  xsm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px",
  xxl: "1300px",
  xxxl: "1600px",
  xxxxl: "1920px",
);

@mixin xs {
  @media (min-width: 0) and ((max-width: #{$xs})) {
    @content;
  }
}

@mixin max-xs {
  @media (max-width: #{$xs}) {
    @content;
  }
}

@mixin min-xs {
  @media (min-width: #{$xs}) {
    @content;
  }
}

@mixin sm {
  @media (min-width: #{$xs + 1}) and ((max-width: #{$sm})) {
    @content;
  }
}

@mixin max-sm {
  @media (max-width: #{$sm}) {
    @content;
  }
}

@mixin min-sm {
  @media (min-width: #{$sm}) {
    @content;
  }
}

@mixin xsm {
  @media (min-width: #{$xs + 1}) and ((max-width: #{$xsm})) {
    @content;
  }
}

@mixin max-xsm {
  @media (max-width: #{$xsm}) {
    @content;
  }
}

@mixin min-xsm {
  @media (min-width: #{$xsm}) {
    @content;
  }
}

@mixin md {
  @media (min-width: #{$sm + 1}) and ((max-width: #{$md})) {
    @content;
  }
}

@mixin max-md {
  @media (max-width: #{$md}) {
    @content;
  }
}

@mixin min-md {
  @media (min-width: #{$md}) {
    @content;
  }
}

@mixin min-sm {
  @media (min-width: #{$md}) {
    @content;
  }
}

@mixin lg {
  @media (min-width: #{$md + 1}) and ((max-width: #{$lg})) {
    @content;
  }
}

@mixin max-lg {
  @media (max-width: #{$lg}) {
    @content;
  }
}

@mixin min-lg {
  @media (min-width: #{$lg}) {
    @content;
  }
}

@mixin xl {
  @media (min-width: #{$lg + 1}) and ((max-width: #{$xl})) {
    @content;
  }
}

@mixin max-xl {
  @media (max-width: #{$xl}) {
    @content;
  }
}

@mixin min-xl {
  @media (min-width: #{$xl}) {
    @content;
  }
}

@mixin xxl {
  @media (min-width: #{$xl + 1}) and ((max-width: #{$xxl})) {
    @content;
  }
}

@mixin lg-xxl {
  @media (min-width: #{$lg + 1}) and ((max-width: #{$xxl})) {
    @content;
  }
}

@mixin max-xxl {
  @media (max-width: #{$xxl}) {
    @content;
  }
}

@mixin min-xxl {
  @media (min-width: #{$xxl}) {
    @content;
  }
}

@mixin xxxl {
  @media (min-width: #{$xxl + 1}) and ((max-width: #{$xxxl})) {
    @content;
  }
}

@mixin max-xxxl {
  @media (max-width: #{$xxxl}) {
    @content;
  }
}

@mixin min-xxxl {
  @media (min-width: #{$xxxl}) {
    @content;
  }
}

@mixin xxxxl {
  @media (min-width: #{$xxxl + 1}) and ((max-width: #{$xxxl})) {
    @content;
  }
}

@mixin max-xxxxl {
  @media (max-width: #{$xxxxl}) {
    @content;
  }
}

@mixin min-xxxxl {
  @media (min-width: #{$xxxxl}) {
    @content;
  }
}

@mixin response-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $bp-value: map-get($breakpoints, $breakpoint);

    @media (max-width: $bp-value) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint '#{$breakpoint}'!";
  }
}
